// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  user
  admin
  agent
}

enum SubscriptionTier {
  free
  basic
  premium
}

enum DeploymentStatus {
  pending
  deploying
  active
  failed
  stopped
}

enum NotificationType {
  feedback_received
  deployment_status
  system_alert
  feedback_alert
}

enum ProductStatus {
  draft
  published
  archived
}

enum ProductAccessLevel {
  public
  private
  restricted
}

enum ProductLicenseType {
  free
  commercial
  enterprise
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  role            UserRole  @default(user)
  subscriptionTier SubscriptionTier @default(free)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  products        Product[]
  deployments     Deployment[] @relation("DeploymentCreator")
  deployedDeployments Deployment[] @relation("DeploymentDeployer")
  reviews         Review[]
  feedbacks       AgentFeedback[]
  purchases       Purchase[]
  earnings        Earning[]
  notifications   Notification[]
  files           File[]
}

model Product {
  id              String    @id @default(cuid())
  name            String
  description     String
  fileUrl         String
  rating          Float     @default(0)
  downloadCount   Int       @default(0)
  requirements    String[]
  longDescription String?
  price           Float
  category        String
  tags            String[]
  version         String
  status          ProductStatus @default(draft)
  accessLevel     ProductAccessLevel @default(public)
  licenseType     ProductLicenseType @default(free)
  environment     String
  framework       String
  modelType       String
  createdBy       String
  earningsSplit   Float
  isPublic        Boolean   @default(true)
  uploadedBy      String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  creator         User      @relation(fields: [createdBy], references: [id])
  reviews         Review[]  @relation("ProductReviews")
  purchases       Purchase[]
  earnings        Earning[]
  files           File[]
}

model Deployment {
  id              String    @id @default(cuid())
  name            String
  status          DeploymentStatus @default(pending)
  description     String
  accessLevel     String
  licenseType     String
  environment     String
  framework       String
  modelType       String
  source          String
  deployedBy      String
  createdBy       String
  rating          Float     @default(0)
  totalRatings    Int       @default(0)
  downloadCount   Int       @default(0)
  startDate       DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  isPublic        Boolean   @default(true)
  version         String    @default("1.0.0")
  health          Json?     @default("{}")

  // Relations
  creator         User      @relation("DeploymentCreator", fields: [createdBy], references: [id])
  deployer        User      @relation("DeploymentDeployer", fields: [deployedBy], references: [id])
  feedbacks       AgentFeedback[]
  reviews         Review[]
  metrics         AgentMetrics[]
  logs            AgentLog[]
}

model AgentFeedback {
  id              String    @id @default(cuid())
  rating          Int
  deploymentId    String
  userId          String
  comment         String?
  sentimentScore  Float?
  categories      Json?
  creatorResponse String?
  responseDate    DateTime?
  metadata        Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  deployment      Deployment @relation(fields: [deploymentId], references: [id])
  user            User      @relation(fields: [userId], references: [id])
}

model Review {
  id              String    @id @default(cuid())
  rating          Int
  deploymentId    String
  userId          String
  productId       String?
  comment         String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  deployment      Deployment @relation(fields: [deploymentId], references: [id])
  user            User      @relation(fields: [userId], references: [id])
  product         Product?  @relation("ProductReviews", fields: [productId], references: [id])
}

model Purchase {
  id              String    @id @default(cuid())
  status          String
  userId          String
  productId       String
  amount          Float
  stripeTransferId String?
  paidAt          DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user            User      @relation(fields: [userId], references: [id])
  product         Product   @relation(fields: [productId], references: [id])
}

model Earning {
  id              String    @id @default(cuid())
  status          String
  userId          String
  productId       String
  amount          Decimal   @db.Decimal(10, 2)
  stripeTransferId String?
  paidAt          DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user            User      @relation(fields: [userId], references: [id])
  product         Product   @relation(fields: [productId], references: [id])
}

model Notification {
  id              String    @id @default(cuid())
  type            NotificationType
  message         String
  userId          String
  read            Boolean   @default(false)
  metadata        Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user            User      @relation(fields: [userId], references: [id])
}

model AgentMetrics {
  id              String    @id @default(cuid())
  deploymentId    String
  errorRate       Float
  responseTime    Float
  successRate     Float
  totalRequests   Int
  activeUsers     Int
  averageResponseTime Float
  requestsPerMinute Float
  averageTokensUsed Float
  costPerRequest  Float
  totalCost       Float
  timestamp       DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastUpdated     DateTime  @default(now())

  // Relations
  deployment      Deployment @relation(fields: [deploymentId], references: [id])
}

model AgentLog {
  id              String    @id @default(cuid())
  deploymentId    String
  level           String
  message         String
  metadata        Json?
  timestamp       DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  deployment      Deployment @relation(fields: [deploymentId], references: [id])
}

model File {
  id              String    @id @default(cuid())
  name            String
  path            String
  size            Int
  type            String
  url             String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  productId       String?
  uploadedBy      String

  // Relations
  product         Product?  @relation(fields: [productId], references: [id])
  user            User      @relation(fields: [uploadedBy], references: [id])
}
