generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(cuid())
  email           String         @unique
  name            String?
  password        String?
  image           String?
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt
  deployments     Deployment[]
  subscription_tier String       @default("free")
  earnings        Earning[]
  products        Product[]
  purchases       Purchase[]
  reviews         Review[]
}

model Deployment {
  id            String    @id @default(cuid())
  name          String
  description   String
  framework     String
  file_url      String?
  deployed_by   String
  users         User      @relation(fields: [deployed_by], references: [id])
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  access_level  String    @default("public")
  license_type  String    @default("free")
  price_cents   Int       @default(0)
  downloads     Int       @default(0)
  rating        Float     @default(0)
  rating_count  Int       @default(0)
  download_count Int      @default(0)
  status        String    @default("pending")
  model_type    String
  requirements  String?
  api_endpoint  String?
  environment   String    @default("production")
  version       String
  source        String
}

model Earning {
  id          String    @id @default(cuid())
  amount      Float
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  product_id  String?
  user_id     String?
  products    Product?  @relation(fields: [product_id], references: [id])
  users       User?     @relation(fields: [user_id], references: [id])
}

model Product {
  id          String    @id @default(cuid())
  name        String
  description String
  price       Float
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  uploaded_by String?
  users       User?     @relation(fields: [uploaded_by], references: [id])
  earnings    Earning[]
  purchases   Purchase[]
  reviews     Review[]
  download_count Int    @default(0)
}

model Purchase {
  id          String    @id @default(cuid())
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())
  product_id  String?
  user_id     String?
  products    Product?  @relation(fields: [product_id], references: [id])
  users       User?     @relation(fields: [user_id], references: [id])
}

model Review {
  id          String    @id @default(cuid())
  rating      Int
  comment     String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())
  product_id  String?
  user_id     String?
  products    Product?  @relation(fields: [product_id], references: [id])
  users       User?     @relation(fields: [user_id], references: [id])
}

model AgentMetrics {
  id             String   @id @default(cuid())
  agentId        String   @unique
  requests       Int      @default(0)
  errors         Int      @default(0)
  avgResponseTime Float   @default(0)
  lastActive     DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([agentId])
}

model AgentLog {
  id        String   @id @default(cuid())
  agentId   String
  level     String   // 'info' | 'warning' | 'error'
  message   String
  metadata  Json?
  timestamp DateTime @default(now())

  @@index([agentId])
  @@index([level])
  @@index([timestamp])
}
