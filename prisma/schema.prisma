generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  name            String?
  email           String    @unique
  emailVerified   DateTime?
  password        String
  image           String?
  role            String    @default("user")
  subscriptionTier String   @default("free")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdProducts Product[] @relation("ProductCreator")
  uploadedProducts Product[] @relation("ProductUploader")
  purchases       Purchase[]
  deployments     Deployment[]
  feedbacks       AgentFeedback[]
  notifications   Notification[]
  reviews         Review[]   @relation("UserReviews")
  earnings        Earning[]  @relation("UserEarnings")
  files           File[]     @relation("UserFiles")

  @@map("users")
}

model Product {
  id              String    @id @default(uuid())
  name            String
  slug            String    @unique
  description     String
  longDescription String?
  category        String
  price           Decimal   @db.Decimal(10, 2)
  imageUrl        String?
  fileUrl         String
  documentation   String?
  features        String[]
  requirements    String[]
  rating          Int       @default(0)
  averageRating   Decimal   @default(0) @db.Decimal(3, 2)
  totalRatings    Int       @default(0)
  createdBy       String
  uploadedBy      String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  isPublic        Boolean   @default(true)
  isFeatured      Boolean   @default(false)
  downloadCount   Int       @default(0)
  earningsSplit   Decimal   @default(0.70) @db.Decimal(3, 2)
  creator         User      @relation("ProductCreator", fields: [createdBy], references: [id])
  uploader        User      @relation("ProductUploader", fields: [uploadedBy], references: [id])
  purchases       Purchase[]
  reviews         Review[]
  earnings        Earning[]

  @@map("products")
}

model Review {
  id        String   @id @default(uuid())
  productId String
  userId    String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation("UserReviews", fields: [userId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Earning {
  id              String    @id @default(uuid())
  userId          String
  productId       String
  amount          Decimal   @db.Decimal(10, 2)
  status          String    @default("pending")
  stripeTransferId String?
  createdAt       DateTime  @default(now())
  paidAt          DateTime?
  user            User      @relation("UserEarnings", fields: [userId], references: [id])
  product         Product   @relation(fields: [productId], references: [id])

  @@map("earnings")
}

model Deployment {
  id            String    @id @default(uuid())
  name          String
  description   String
  framework     String
  fileUrl       String?
  deployedBy    String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accessLevel   String    @default("public")
  licenseType   String    @default("free")
  priceCents    Int       @default(0)
  downloads     Int       @default(0)
  rating        Decimal   @default(0) @db.Decimal(3, 2)
  ratingCount   Int       @default(0)
  downloadCount Int       @default(0)
  status        String    @default("pending")
  modelType     String
  requirements  String?
  apiEndpoint   String?
  environment   String    @default("production")
  version       String
  source        String
  deployer      User      @relation(fields: [deployedBy], references: [id])
  metrics       AgentMetrics?
  logs          AgentLog[]
  feedbacks     AgentFeedback[]

  @@map("deployments")
}

model Purchase {
  id        String    @id @default(uuid())
  userId    String
  productId String
  amount    Decimal   @db.Decimal(10, 2)
  status    String    @default("pending")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])

  @@map("purchases")
}

model AgentFeedback {
  id             String    @id @default(uuid())
  agentId        String
  userId         String
  rating         Int
  comment        String?
  sentimentScore Decimal?  @db.Decimal(3, 2)
  categories     Json?
  creatorResponse String?
  responseDate   DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  agent          Deployment @relation(fields: [agentId], references: [id])
  user           User      @relation(fields: [userId], references: [id])

  @@map("agent_feedbacks")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String
  title     String
  message   String
  metadata  Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model AgentMetrics {
  id                String    @id @default(uuid())
  agentId          String    @unique
  totalRequests    Int       @default(0)
  averageResponseTime Int     @default(0)
  errorRate        Float     @default(0)
  successRate      Float     @default(0)
  activeUsers      Int       @default(0)
  requestsPerMinute Float    @default(0)
  averageTokensUsed Int      @default(0)
  costPerRequest   Float     @default(0)
  totalCost        Float     @default(0)
  lastUpdated      DateTime  @default(now())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  agent            Deployment @relation(fields: [agentId], references: [id])

  @@map("agent_metrics")
}

model AgentLog {
  id        String   @id @default(uuid())
  agentId   String
  level     String
  message   String
  metadata  Json?
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  agent     Deployment @relation(fields: [agentId], references: [id])

  @@map("agent_logs")
}

model File {
  id          String   @id @default(uuid())
  name        String
  type        String
  size        Int
  path        String
  uploadedBy  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation("UserFiles", fields: [uploadedBy], references: [id])

  @@map("files")
}
